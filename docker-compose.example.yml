version: "3.7"

networks:
  frontend:
    driver: ${NETWORKS_DRIVER}
  backend:
    driver: ${NETWORKS_DRIVER}
  proxy:
    driver: ${NETWORKS_DRIVER}

volumes:
  mysql:
    driver: ${VOLUMES_DRIVER}
  mariadb:
    driver: ${VOLUMES_DRIVER}
  postgres:
    driver: ${VOLUMES_DRIVER}
  mongo:
    driver: ${VOLUMES_DRIVER}
  redis:
    driver: ${VOLUMES_DRIVER}
  webhook:
    driver: ${VOLUMES_DRIVER}
  elasticsearch:
    driver: ${VOLUMES_DRIVER}
  fusionauth:
    driver: ${VOLUMES_DRIVER}

services:
  ### Application ################################################
  frontend:
    restart: always
    build:
      context: ../frontend/
    volumes:
      - ${APP_CODE_PATH_CONTAINER}/app/node_modules
      - ${APP_CODE_PATH_HOST}/app:${APP_CODE_PATH_CONTAINER}/app
    env_file: ../frontend/.env
    depends_on:
      - traefik
    networks:
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=Host(`frontend.local.test`)
      - traefik.http.routers.frontend.entrypoints=web
      - traefik.http.services.frontend.loadbalancer.server.port=3000
      - traefik.http.routers.frontend.middlewares=auth
      - traefik.http.middlewares.auth.basicauth.users=test:xxx
      - traefik.http.routers.frontend.tls.certresolver=letsEncryptDns
      - traefik.http.routers.frontend.entrypoints=websecure

  ################################################
  ## Adonis Microservices ################################################

  authors:
    restart: always
    build:
      context: ../${MS_DIR}/${MS_ONE}
      dockerfile: Dockerfile.v5.dev
    volumes:
      - ${APP_CODE_PATH_CONTAINER}/api/node_modules
      - ${APP_CODE_PATH_HOST}/${MS_DIR}/${MS_ONE}:${APP_CODE_PATH_CONTAINER}/api
    env_file: ../${MS_DIR}/${MS_ONE}/.env
    depends_on:
      - ${API_DATABASE_CLIENT}
    networks:
      - frontend
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.authors.rule=Host(`authors.local.test`)
      - traefik.http.routers.authors.entrypoints=web
      - traefik.http.services.authors.loadbalancer.server.port=3333
      # - traefik.http.routers.authors.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.authors.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.authors.entrypoints=websecure

  ## GRAPHQL API ################################################

  graphql:
    build:
      context: graphql
      args:
        NODE_ENV: ${GRAPHQL_API_ENV}
    restart: always
    environment:
      NODE_ENV: ${GRAPHQL_API_ENV}
      PRISMA_ENDPOINT: ${PRISMA_ENDPOINT}
      PRISMA_SECRET: ${PRISMA_SECRET}
      APP_SECRET: ${GRAPHQL_API_APP_SECRET}
      BCRYPT_SALT_ROUNDS: ${GRAPHQL_API_BCRYPT_SALT_ROUNDS}
      FRONTEND_URL: ${GRAPHQL_PRISMA_FRONTEND_URL}
      BACKEND_URL: ${GRAPHQL_PRISMA_BACKEND_URL}
      PLAYGROUND_URL: ${GRAPHQL_PRISMA_PLAYGROUND_URL}
    volumes:
      - ${APP_CODE_PATH_CONTAINER}/api/node_modules
      - ./graphql/src:${APP_CODE_PATH_CONTAINER}/api/src
    networks:
      - frontend
    depends_on:
      - prisma
    labels:
      - traefik.enable=true
      - traefik.http.routers.graph.rule=Host(`graph.local.test`)
      - traefik.http.routers.graph.entrypoints=web
      - traefik.http.services.graph.loadbalancer.server.port=${GRAPHQL_CONTAINER_PORT}
      # - traefik.http.routers.graph.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.graph.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.graph.entrypoints=websecure

  ## PRISMA ################################################
  prisma:
    image: prismagraphql/prisma:1.34
    restart: always
    ports:
      - "${PRISMA_CONTAINER_PORT}:${PRISMA_CONTAINER_PORT}"
    environment:
      LOG_LEVEL: TRACE
      PRISMA_CONFIG: |
        LOG_LEVEL: TRACE
        ## The Management API secret is used by the Prisma CLI to generate authentication tokens and authenticate its requests against the Prisma server.
        # managementApiSecret: ${PRISMA_MANAGEMENT_API_SECRET}
        port: 4466
        databases:
          ## MongoDB ##
          default:
            database: ${API_DATABASE_NAME}
            connector: ${API_DATABASE_CLIENT}
            uri: mongodb://${API_DATABASE_USER}:${API_DATABASE_PASSWORD}@${API_DATABASE_HOST}/${API_DATABASE_AUTHENTICATION_DATABASE}
            migrations: ${PRISMA_MIGRATIONS}
            ssl: ${API_DATABASE_SSL}
            ## The maximum number of database connections (must be at least 2).
            # connectionLimit: ${PRISMA_CONNECTION_LIMIT}
          ## SQL ##
          # default:
          # database: ${API_DATABASE_NAME}
          # connector: ${API_DATABASE_CLIENT}
          # host: ${API_DATABASE_HOST}
          # port: ${API_DATABASE_PORT}
          # user: ${API_DATABASE_USER}
          # password: ${API_DATABASE_PASSWORD}
          # migrations: ${PRISMA_MIGRATIONS}
          # ssl: ${API_DATABASE_SSL}
          # connectionLimit: ${PRISMA_CONNECTION_LIMIT}
    networks:
      - frontend
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.prisma.rule=Host(`prisma.local.test`)
      - traefik.http.routers.prisma.entrypoints=web
      - traefik.http.services.prisma.loadbalancer.server.port=${PRISMA_CONTAINER_PORT}
      # - traefik.http.routers.prisma.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.prisma.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.prisma.entrypoints=websecure

  ## STRAPI ################################################
  strapi:
    depends_on:
      - ${API_DATABASE_CLIENT}
    build:
      context: ./strapi
    restart: unless-stopped
    networks:
      - frontend
      - backend
    # env_file: ./strapi/.env
    environment:
      - DATABASE_HOST=${API_DATABASE_HOST}
      - DATABASE_PORT=${API_DATABASE_PORT}
      - DATABASE_SRV=${API_DATABASE_SRV}
      - DATABASE_NAME=${API_DATABASE_NAME}
      - DATABASE_USERNAME=${API_DATABASE_USER}
      - DATABASE_PASSWORD=${API_DATABASE_PASSWORD}
      - DATABASE_SSL=${API_DATABASE_SSL}
      - DATABASE_AUTHENTICATION_DATABASE=${API_DATABASE_AUTHENTICATION_DATABASE}
    volumes:
      - ${APP_CODE_PATH_CONTAINER}/api/node_modules
      - ./strapi:${APP_CODE_PATH_CONTAINER}/api
    labels:
      - traefik.enable=true
      - traefik.http.routers.strapi.rule=Host(`strapi.local.test`)
      - traefik.http.routers.strapi.entrypoints=web
      - traefik.http.services.strapi.loadbalancer.server.port=${STRAPI_CONTAINER_PORT}
      # - traefik.http.routers.strapi.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.strapi.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.strapi.entrypoints=websecure

  ### MySQL ################################################
  mysql:
    build:
      context: ./mysql
      args:
        - MYSQL_VERSION=${MYSQL_VERSION}
    command: --default-authentication-plugin=mysql_native_password
    environment:
      - MYSQL_DATABASE=${API_DATABASE_NAME}
      - MYSQL_USER=${API_DATABASE_USER}
      - MYSQL_PASSWORD=${API_DATABASE_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - TZ=${WORKSPACE_TIMEZONE}
    volumes:
      - ${DATA_PATH_HOST}/mysql:/var/lib/mysql
      - ${MYSQL_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    networks:
      - backend

  ### MariaDB ##############################################
  mariadb:
    build:
      context: ./mariadb
      args:
        - http_proxy
        - https_proxy
        - no_proxy
        - MARIADB_VERSION=${MARIADB_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/mariadb:/var/lib/mysql
      - ${MARIADB_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    command: --default-authentication-plugin=mysql_native_password
    environment:
      - TZ=${WORKSPACE_TIMEZONE}
      - MYSQL_DATABASE=${API_DATABASE_NAME}
      - MYSQL_USER=${API_DATABASE_USER}
      - MYSQL_PASSWORD=${API_DATABASE_PASSWORD}
      - MYSQL_ROOT_PASSWORD=${MARIADB_ROOT_PASSWORD}
    networks:
      - backend

  ### PostgreSQL ###########################################
  postgres:
    build:
      context: ./postgres
      args:
        - POSTGRES_VERSION=${POSTGRES_VERSION}
    volumes:
      - ${DATA_PATH_HOST}/postgres:/var/lib/postgresql/data
      - ${POSTGRES_ENTRYPOINT_INITDB}:/docker-entrypoint-initdb.d
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      - POSTGRES_DB=${API_DATABASE_NAME}
      - POSTGRES_USER=${API_DATABASE_USER}
      - POSTGRES_PASSWORD=${API_DATABASE_PASSWORD}
    networks:
      - backend

  ### MongoDB ##############################################
  mongo:
    build:
      context: ./mongo
      args:
        - MONGO_VERSION=${MONGO_VERSION}
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${API_DATABASE_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${API_DATABASE_PASSWORD}
      MONGO_INITDB_DATABASE: ${API_DATABASE_NAME}
    volumes:
      - ${DATA_PATH_HOST}/mongo:/data/db
    networks:
      - backend

  ### MongoWebUI ################################################
  mongo-webui:
    image: mongoclient/mongoclient
    environment:
      - ROOT_URL=${MONGO_WEBUI_ROOT_URL}
      - MONGO_URL=${MONGO_WEBUI_MONGO_URL}
      - INSTALL_MONGO=${MONGO_WEBUI_INSTALL_MONGO}
    volumes:
      - ${DATA_PATH_HOST}/mongo-webui:/data/db
    # ports:
    # - "${MONGO_WEBUI_PORT}:3000"
    networks:
      - backend
    depends_on:
      - mongo
    labels:
      - traefik.enable=true
      - traefik.http.routers.mongo.rule=Host(`mongo.local.test`)
      - traefik.http.routers.mongo.entrypoints=web
      - traefik.http.services.mongo.loadbalancer.server.port=${MONGO_WEBUI_PORT}
      # - traefik.http.routers.mongo.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.mongo.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.mongo.entrypoints=websecure

  ### Mongo Express ##############################################
  mongo-express:
    depends_on:
      - mongo
    image: mongo-express
    networks:
      - frontend
      - backend
    environment:
      ME_CONFIG_MONGODB_SERVER: ${ME_CONFIG_MONGODB_SERVER}
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${API_DATABASE_USER}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${API_DATABASE_PASSWORD}
      ME_CONFIG_BASICAUTH_USERNAME: ${ME_CONFIG_BASICAUTH_USERNAME}
      ME_CONFIG_BASICAUTH_PASSWORD: ${ME_CONFIG_BASICAUTH_PASSWORD}
      ME_CONFIG_MONGODB_ENABLE_ADMIN: ${ME_CONFIG_MONGODB_ENABLE_ADMIN}
      ME_CONFIG_MONGODB_AUTH_DATABASE: ${API_DATABASE_AUTHENTICATION_DATABASE}
      ME_CONFIG_MONGODB_AUTH_USERNAME: ${API_DATABASE_USER}
      ME_CONFIG_MONGODB_AUTH_PASSWORD: ${API_DATABASE_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.http.routers.mongoex.rule=Host(`mongoex.local.test`)
      - traefik.http.routers.mongoex.entrypoints=web
      - traefik.http.services.mongoex.loadbalancer.server.port=${MONGO_EXPRESS_CONTAINER_PORT}
      # - traefik.http.routers.mongoex.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.mongoex.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.mongoex.entrypoints=websecure

  ### Jenkins ###################################################
  jenkins:
    build: ./jenkins
    environment:
      JAVA_OPTS: -Djava.awt.headless=true
      DOCKER_HOST: tcp://socket-proxy:2375
    ports:
      - ${JENKINS_HOST_SLAVE_AGENT_PORT}:50000
      # - ${JENKINS_HOST_HTTP_PORT}:8080
    privileged: true
    volumes:
      - ${JENKINS_HOME}:/var/jenkins_home
    networks:
      - frontend
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.jenkins.rule=Host(`jenkins.local.test`)
      - traefik.http.routers.jenkins.entrypoints=web
      - traefik.http.services.jenkins.loadbalancer.server.port=${JENKINS_CONTAINER_PORT}
      # - traefik.http.routers.jenkins.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.jenkins.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.jenkins.entrypoints=websecure

  ### Webhook ###################################################
  webhook:
    build: ./webhook
    volumes:
      - ${WEBHOOK_HOOKS_DIR}:/etc/webhook
      - ${WEBHOOK_SCRIPTS_DIR}:/opt/scripts
      - ${APP_CODE_PATH_HOST}:/opt/deploy
    networks:
      - frontend
    labels:
      - traefik.enable=true
      - traefik.http.routers.webhook.rule=Host(`webhook.local.test`)
      - traefik.http.routers.webhook.entrypoints=web
      - traefik.http.services.webhook.loadbalancer.server.port=${WEBHOOK_CONTAINER_PORT}
      # - traefik.http.routers.webhook.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.webhook.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.webhook.entrypoints=websecure

  ### Adminer ################################################
  adminer:
    depends_on:
      - ${API_DATABASE_HOST}
    image: adminer:latest
    restart: unless-stopped
    environment:
      - ADMINER_DESIGN=${ADMINER_DESIGN}
    networks:
      - frontend
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.adminer.rule=Host(`adminer.local.test`)
      - traefik.http.routers.adminer.entrypoints=web
      - traefik.http.services.adminer.loadbalancer.server.port=${ADMINER_CONTAINER_PORT}
      # - traefik.http.routers.adminer.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.adminer.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.adminer.entrypoints=websecure

  ### phpMyAdmin ################################################
  phpmyadmin:
    depends_on:
      - ${API_DATABASE_HOST}
    image: phpmyadmin/phpmyadmin:latest
    # ports:
    # - "8081:80"
    networks:
      - frontend
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.pma.rule=Host(`pma.local.test`)
      - traefik.http.routers.pma.entrypoints=web
      - traefik.http.services.pma.loadbalancer.server.port=${PHPMYADMIN_CONTAINER_PORT}
      # - traefik.http.routers.pma.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.pma.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.pma.entrypoints=websecure

  ### pgAdmin ################################################
  pgadmin:
    depends_on:
      - ${API_DATABASE_HOST}
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - PGADMIN_LISTEN_ADDRESS=${PGADMIN_LISTEN_ADDRESS}
      - PGADMIN_LISTEN_PORT=${PGADMIN_LISTEN_PORT}
    # ports:
    # - "80:80"
    networks:
      - frontend
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.pg.rule=Host(`pg.local.test`)
      - traefik.http.routers.pg.entrypoints=web
      - traefik.http.services.pg.loadbalancer.server.port=${PGADMIN_CONTAINER_PORT}
      # - traefik.http.routers.pg.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.pg.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.pg.entrypoints=websecure

  ### Redis ################################################
  redis:
    build: ./redis
    volumes:
      - ${DATA_PATH_HOST}/redis:/data
    ports:
      - ${REDIS_PORT}:6379
    networks:
      - backend

  ### Redis Cluster ##########################################
  redis-cluster:
    build: ./redis-cluster
    ports:
      - ${REDIS_CLUSTER_PORT_RANGE}:7000-7005
    networks:
      - backend

  ### REDISWEBUI ################################################
  redis-webui:
    build:
      context: ./redis-webui
    environment:
      - ADMIN_USER=${REDIS_WEBUI_USERNAME}
      - ADMIN_PASS=${REDIS_WEBUI_PASSWORD}
      - REDIS_1_HOST=${REDIS_WEBUI_CONNECT_HOST}
      - REDIS_1_PORT=${REDIS_WEBUI_CONNECT_PORT}
    networks:
      - frontend
      - backend
    depends_on:
      - redis
    labels:
      - traefik.enable=true
      - traefik.http.routers.redis.rule=Host(`redis.local.test`)
      - traefik.http.routers.redis.entrypoints=web
      - traefik.http.services.redis.loadbalancer.server.port=${REDIS_WEBUI_CONTAINER_PORT}
      # - traefik.http.routers.redis.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.redis.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.redis.entrypoints=websecure

  ### TRAEFIK #########################################
  socket-proxy:
    image: tecnativa/docker-socket-proxy
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      CONTAINERS: 1
    networks:
      - proxy

  traefik:
    build:
      context: ./traefik
      args:
        - TRAEFIK_VERSION=${TRAEFIK_VERSION}
    restart: always
    env_file: ./traefik/.env
    volumes:
      - ./traefik/acme:/etc/traefik/acme
      - ./traefik/traefik.yaml:/traefik.yaml
      - ./traefik/dynamic/:/etc/traefik/dynamic
      - ./traefik/certs:/certs
    ports:
      - ${TRAEFIK_HOST_HTTP_PORT}:80
      - ${TRAEFIK_HOST_HTTPS_PORT}:443
    networks:
      - frontend
      - proxy
    depends_on:
      - socket-proxy
    labels:
      - traefik.enable=true

  ### ELASTICSEARCH ########################################
  elasticsearch:
    build:
      context: ./elasticsearch
      args:
        - ELK_VERSION=${ELK_VERSION}
    restart: unless-stopped
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
    environment:
      - cluster.name=fusionauth
      - node.name=fusionauth-node
      - bootstrap.memory_lock=true
      - ES_JAVA_OPTS=${ELASTICSEARCH_JAVA_OPTS}
      - cluster.initial_master_nodes=fusionauth-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
    # Un-comment to access the search service directly
    # ports:
    # - ${ELASTICSEARCH_HOST_HTTP_PORT}:9200
    # - ${ELASTICSEARCH_HOST_TRANSPORT_PORT}:9300
    networks:
      - frontend
      - backend
    labels:
      - traefik.enable=true
      - traefik.http.routers.elastic.rule=Host(`elastic.local.test`)
      - traefik.http.routers.elastic.entrypoints=web
      - traefik.http.services.elastic.loadbalancer.server.port=${ELASTICSEARCH_HOST_HTTP_PORT}
      # - traefik.http.routers.elastic.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.elastic.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.elastic.entrypoints=websecure

  ### FUSIONAUTH ########################################
  fusionauth:
    image: fusionauth/fusionauth-app:latest
    restart: unless-stopped
    volumes:
      - fusionauth:/usr/local/fusionauth/config
    environment:
      # DATABASE_URL: ${API_DATABASE_URL}://${API_DATABASE_CLIENT}:${API_DATABASE_PORT}/${API_DATABASE_NAME}
      # DATABASE_ROOT_USER: ${API_DATABASE_ROOT_USER}
      # DATABASE_ROOT_PASSWORD: ${API_DATABASE_ROOT_PASSWORD}
      DATABASE_USER: ${API_DATABASE_USER}
      DATABASE_PASSWORD: ${API_DATABASE_PASSWORD}
      FUSIONAUTH_MEMORY: ${FUSIONAUTH_MEMORY}
      # FUSIONAUTH_SEARCH_SERVERS: ${FUSIONAUTH_SEARCH_SERVERS}
      # FUSIONAUTH_SEARCH_ENGINE_TYPE: elasticsearch
      FUSIONAUTH_HTTP_PORT: ${FUSIONAUTH_HTTP_PORT}
      FUSIONAUTH_HTTPS_PORT: ${FUSIONAUTH_HTTPS_PORT}
      FUSIONAUTH_RUNTIME_MODE: ${FUSIONAUTH_RUNTIME_MODE}
      FUSIONAUTH_URL: ${FUSIONAUTH_URL}
    depends_on:
      - ${API_DATABASE_CLIENT}
      - elasticsearch
      - traefik
    networks:
      - frontend
      - backend
    # ports:
    # - 9011:${FUSIONAUTH_CONTAINER_PORT}
    labels:
      - traefik.enable=true
      - traefik.http.routers.fusionauth.rule=Host(`auth.local.test`)
      - traefik.http.routers.fusionauth.entrypoints=web
      - traefik.http.services.fusionauth.loadbalancer.server.port=${FUSIONAUTH_HTTP_PORT}
      # - traefik.http.routers.fusionauth.middlewares=auth
      # - traefik.http.middlewares.auth.basicauth.users=test:xxx
      # - traefik.http.routers.fusionauth.tls.certresolver=letsEncryptDns
      # - traefik.http.routers.fusionauth.entrypoints=websecure
